from datetime import datetime, timedelta
from persiantools.jdatetime import JalaliDate

class DateCalculator:
    def get_birthday_alert(self, birth_date):
        """Ù‡Ø´Ø¯Ø§Ø± 5 Ø±ÙˆØ² Ù…Ø§Ù†Ø¯Ù‡ Ø¨Ù‡ ØªÙˆÙ„Ø¯"""
        if not birth_date:
            return None
        
        days_left = self._days_to_birthday(birth_date)
        
        if 0 < days_left <= 5:
            return {
                'type': 'birthday',
                'message': f'ðŸŽ‚ {days_left} Ø±ÙˆØ² ØªØ§ ØªÙˆÙ„Ø¯',
                'days_left': days_left,
                'priority': 4,
                'css_class': 'birthday-alert'
            }
        
        return None
    
    def get_payment_alert(self, member_id, last_payment_date):
        """Ù‡Ø´Ø¯Ø§Ø± 10 Ø±ÙˆØ² Ù…Ø§Ù†Ø¯Ù‡ Ø¨Ù‡ Ù¾Ø±Ø¯Ø§Ø®Øª"""
        if not last_payment_date:
            return {
                'type': 'payment_missing',
                'message': 'ðŸ’° Ù¾Ø±Ø¯Ø§Ø®Øª Ø«Ø¨Øª Ù†Ø´Ø¯Ù‡',
                'days_left': -1,
                'priority': 1,
                'css_class': 'payment-missing'
            }
        
        days_left = self._days_to_payment_deadline(last_payment_date)
        
        if 0 < days_left <= 10:
            return {
                'type': 'payment_due',
                'message': f'ðŸ’° {days_left} Ø±ÙˆØ² ØªØ§ Ù¾Ø±Ø¯Ø§Ø®Øª',
                'days_left': days_left,
                'priority': 2,
                'css_class': 'payment-alert'
            }
        
        return None
    
    def _days_to_birthday(self, birth_date):
        """Ù…Ø­Ø§Ø³Ø¨Ù‡ Ø±ÙˆØ²Ù‡Ø§ÛŒ Ù…Ø§Ù†Ø¯Ù‡ Ø¨Ù‡ ØªÙˆÙ„Ø¯ Ø¨Ø¹Ø¯ÛŒ"""
        try:
            # ØªØ¨Ø¯ÛŒÙ„ ØªØ§Ø±ÛŒØ® ØªÙˆÙ„Ø¯ Ø¨Ù‡ Ù…ÛŒÙ„Ø§Ø¯ÛŒ
            birth_dt = datetime.strptime(birth_date, '%Y-%m-%d')
            today = datetime.now()
            
            # ØªÙˆÙ„Ø¯ Ø§Ù…Ø³Ø§Ù„
            birthday_this_year = datetime(today.year, birth_dt.month, birth_dt.day)
            
            # Ø§Ú¯Ø± ØªÙˆÙ„Ø¯ Ø§Ù…Ø³Ø§Ù„ Ú¯Ø°Ø´ØªÙ‡ØŒ ØªÙˆÙ„Ø¯ Ø³Ø§Ù„ Ø¨Ø¹Ø¯
            if birthday_this_year < today:
                birthday_this_year = datetime(today.year + 1, birth_dt.month, birth_dt.day)
            
            # Ù…Ø­Ø§Ø³Ø¨Ù‡ Ø±ÙˆØ²Ù‡Ø§ÛŒ Ù…Ø§Ù†Ø¯Ù‡
            days_left = (birthday_this_year - today).days
            return days_left
            
        except Exception as e:
            print(f"Ø®Ø·Ø§ Ø¯Ø± Ù…Ø­Ø§Ø³Ø¨Ù‡ ØªÙˆÙ„Ø¯: {e}")
            return None
    
    def _days_to_payment_deadline(self, last_payment_date):
        """Ù…Ø­Ø§Ø³Ø¨Ù‡ Ø±ÙˆØ²Ù‡Ø§ÛŒ Ù…Ø§Ù†Ø¯Ù‡ Ø¨Ù‡ Ù…Ù‡Ù„Øª Ù¾Ø±Ø¯Ø§Ø®Øª Ø¨Ø¹Ø¯ÛŒ"""
        try:
            last_payment_dt = datetime.strptime(last_payment_date, '%Y-%m-%d')
            today = datetime.now()
            
            # Ù…Ù‡Ù„Øª Ù¾Ø±Ø¯Ø§Ø®Øª Ø¨Ø¹Ø¯ÛŒ (1 Ù…Ø§Ù‡ Ø¨Ø¹Ø¯ Ø§Ø² Ø¢Ø®Ø±ÛŒÙ† Ù¾Ø±Ø¯Ø§Ø®Øª)
            next_deadline = last_payment_dt + timedelta(days=30)
            
            # Ù…Ø­Ø§Ø³Ø¨Ù‡ Ø±ÙˆØ²Ù‡Ø§ÛŒ Ù…Ø§Ù†Ø¯Ù‡
            days_left = (next_deadline - today).days
            return days_left
            
        except Exception as e:
            print(f"Ø®Ø·Ø§ Ø¯Ø± Ù…Ø­Ø§Ø³Ø¨Ù‡ Ù…Ù‡Ù„Øª Ù¾Ø±Ø¯Ø§Ø®Øª: {e}")
            return None
    
    def _days_until(self, target_date):
        """Ù…Ø­Ø§Ø³Ø¨Ù‡ Ø±ÙˆØ²Ù‡Ø§ÛŒ Ù…Ø§Ù†Ø¯Ù‡ ØªØ§ ÛŒÚ© ØªØ§Ø±ÛŒØ®"""
        today = datetime.now()
        return (target_date - today).days
    
    def jalali_to_gregorian(self, jalali_date_str):
        """ØªØ¨Ø¯ÛŒÙ„ ØªØ§Ø±ÛŒØ® Ø´Ù…Ø³ÛŒ Ø¨Ù‡ Ù…ÛŒÙ„Ø§Ø¯ÛŒ"""
        try:
            parts = list(map(int, jalali_date_str.split('/')))
            if len(parts) != 3:
                return None
            jalali_date = JalaliDate(parts[0], parts[1], parts[2])
            return jalali_date.to_gregorian()
        except:
            return None
    
    def gregorian_to_jalali(self, gregorian_date):
        """ØªØ¨Ø¯ÛŒÙ„ ØªØ§Ø±ÛŒØ® Ù…ÛŒÙ„Ø§Ø¯ÛŒ Ø¨Ù‡ Ø´Ù…Ø³ÛŒ"""
        try:
            if isinstance(gregorian_date, str):
                gregorian_date = datetime.strptime(gregorian_date, '%Y-%m-%d')
            jalali_date = JalaliDate(gregorian_date)
            return jalali_date.strftime('%Y/%m/%d')
        except:
            return None
